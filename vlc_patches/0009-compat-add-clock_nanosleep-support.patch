From 39c77bd0970d509bd47df2d0c1e58b09281067e2 Mon Sep 17 00:00:00 2001
From: Mehdi Sabwat <mehdisabwat@gmail.com>
Date: Thu, 5 Sep 2019 23:54:30 +0200
Subject: [PATCH 09/15] compat: add clock_nanosleep support

clock_nanosleep() is not supported in emscripten

Implementation from : https://code.woboq.org/userspace/glibc/sysdeps/unix/clock_nanosleep.c.html
---
 compat/clock_nanosleep.c | 91 ++++++++++++++++++++++++++++++++++++++++
 configure.ac             |  1 +
 2 files changed, 92 insertions(+)
 create mode 100644 compat/clock_nanosleep.c

diff --git a/compat/clock_nanosleep.c b/compat/clock_nanosleep.c
new file mode 100644
index 0000000000..d4cfee70e6
--- /dev/null
+++ b/compat/clock_nanosleep.c
@@ -0,0 +1,91 @@
+/*****************************************************************************
+ * clock_nanosleep.c: 
+         High-resolution sleep with the specified clock for emscripten.
+ *****************************************************************************
+ * Copyright Â© 2019 VLC authors, VideoLAN
+ * and Free Software Foundation, Inc.
+ * 
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; either version 2.1 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+#ifdef HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include <assert.h>
+#include <errno.h>
+#include <time.h>
+// #include <sysdep-cancel.h>
+
+/* This implementation assumes that these is only a `nanosleep' system
+   call.  So we have to remap all other activities.  */
+int
+//__clock_nanosleep (clockid_t clock_id, int flags, const struct timespec *req,
+//                  struct timespec *rem)
+clock_nanosleep (clockid_t clock_id, int flags, const struct timespec *req,
+                   struct timespec *rem)
+{
+  struct timespec now;
+
+  if (__builtin_expect (req->tv_nsec, 0) < 0
+      || __builtin_expect (req->tv_nsec, 0) >= 1000000000)
+    return EINVAL;
+
+  if (clock_id == CLOCK_THREAD_CPUTIME_ID)
+    return EINVAL;                /* POSIX specifies EINVAL for this case.  */
+
+  if (clock_id < CLOCK_REALTIME || clock_id > CLOCK_THREAD_CPUTIME_ID)
+    return EINVAL;
+
+  /* If we got an absolute time, remap it.  */
+  if (flags == TIMER_ABSTIME)
+    {
+      long int nsec;
+      long int sec;
+
+      /* Make sure we use safe data types.  */
+      assert (sizeof (sec) >= sizeof (now.tv_sec));
+
+      /* Get the current time for this clock.  */
+      //if (__clock_gettime (clock_id, &now) != 0)
+      if (clock_gettime (clock_id, &now) != 0)
+        return errno;
+
+      /* Compute the difference.  */
+      nsec = req->tv_nsec - now.tv_nsec;
+      sec = req->tv_sec - now.tv_sec - (nsec < 0);
+      if (sec < 0)
+        /* The time has already elapsed.  */
+        return 0;
+
+      now.tv_sec = sec;
+      now.tv_nsec = nsec + (nsec < 0 ? 1000000000 : 0);
+
+      /* From now on this is our time.  */
+      req = &now;
+
+      /* Make sure we are not modifying the struct pointed to by REM.  */
+      rem = NULL;
+    }
+  else if (flags != 0)
+    return EINVAL;
+
+  else if (clock_id != CLOCK_REALTIME)
+    /* Not supported.  */
+    return ENOTSUP;
+  //  return __nanosleep (req, rem), 0 ? errno : 0;
+  return nanosleep (req, rem), 0 ? errno : 0;
+}
+//weak_alias (__clock_nanosleep, clock_nanosleep)
diff --git a/configure.ac b/configure.ac
index e5298e6f7a..5f24ab5945 100644
--- a/configure.ac
+++ b/configure.ac
@@ -325,6 +325,7 @@ case "${host_os}" in
   *emscripten*)
     SYS=emscripten
     AC_LIBOBJ([sigwait])
+    AC_LIBOBJ([clock_nanosleep])
     CC=emcc
     LD=emcc
     LDSHARED=emcc
-- 
2.23.0

